# GitHub Actions workflow: CI for sic
#
# originally based on: https://github.com/BurntSushi/bstr/blob/master/.github/workflows/ci.yml
# which is licensed under Apache License, Version 2.0 or MIT license

name: "github_actions_ci"
on:
  pull_request:
  push:
    branches:
      - master
      - main
  schedule:
    - cron: '00 01 * * *'
env:
  NASM_LINUX: 'https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/linux/nasm-2.15.05-0.fc31.x86_64.rpm'
  NASM_RPM: 'nasm-2.15.05-0.fc31.x86_64.rpm'
  NASM_MACOS: 'https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/macosx/nasm-2.15.05-macosx.zip'
  NASM_MACLOC: 'nasm-2.15.05'
jobs:
  test:
    name: pipeline_run_tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [pinned, stable, beta, nightly, macos, win-gnu, win-msvc]
        include:
          # pinned rust version :: ubuntu
          - build: pinned
            os: ubuntu-18.04
            rust: 1.43.0

          # latest rust stable :: ubuntu
          - build: stable
            os: ubuntu-latest
            rust: stable

          # latest rust beta :: ubuntu
          - build: beta
            os: ubuntu-latest
            rust: beta

          # latest rust nightly :: ubuntu
          - build: nightly
            os: ubuntu-latest
            rust: nightly

          # latest rust stable :: mac_os
          - build: macos
            os: macOS-latest
            rust: stable

          # latest rust stable :: windows + gnu
          - build: win-gnu
            os: windows-latest
            rust: stable-x86_64-gnu

          # latest rust stable :: windows + msvc
          - build: win-msvc
            os: windows-latest
            rust: stable

    steps:
      - name: checkout_repo
        uses: actions/checkout@v2
      - name: install_rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal


      - name: install_nasm_linux
        if: matrix.build == 'pinned' || matrix.build == 'stable' || matrix.build == 'beta' || matrix.build == 'nightly'
        run: sudo apt install alien && wget $NASM_LINUX && sudo alien -i $NASM_RPM
      - name: install_nasm_macos
        if: matrix.build == 'macos'
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" && brew install nasm

      - name: build_workspace_crates
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all

      - name: test_workspace_crates
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --all

      - name: test_workspace_with_all_features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --all --all-features

  rustfmt:
    name: pipeline_rustfmt
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: install_rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt
      - name: check_formatting
        run: |
          cargo fmt --all -- --check

  clippy:
    name: pipeline_clippy
    runs-on: ubuntu-18.04
    steps:
      - name: checkout_repo
        uses: actions/checkout@v2
      - name: install_rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy
      - name: install_nasm
        run: sudo apt install alien && wget $NASM_LINUX && sudo alien -i $NASM_RPM
      - name: check_with_clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --workspace

  cargo_deny:
    name: pipeline_cargo_deny
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

